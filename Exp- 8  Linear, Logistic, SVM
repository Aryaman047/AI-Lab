##LINEAR

import numpy as np
import pandas as pd
df = pd.read_csv('stock market prediction_11266.csv')
df.head
df.shape
df.count()
df2 = df.drop(['Date'],axis=1)
df2


from sklearn.linear_model import LinearRegression
lr = LinearRegression()

x = df[['Open','High','Low','Close','Volume']]
y = df['Adj Close']
from sklearn.model_selection import train_test_split
x1_train, x1_test, y1_train, y1_test = train_test_split(x, y, test_size=0.2,random_state=101)
lr.fit(x1_train,y1_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,normalize=False)
predictions = lr.predict(x1_test)
predictions

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y1_test, predictions))
print('MSE:', metrics.mean_squared_error(y1_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y1_test, predictions)))


##LOGISTIC

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
from sklearn import metrics
print("Logistic Regression model accuracy(in %):", metrics.accuracy_score(y_test, y_pred)*100)

##SVM

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
diabetes = pd.read_csv('diabetes.csv')
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(diabetes.drop('Outcome',axis=1), 
                                                    diabetes['Outcome'], test_size=0.30, 
                                                    random_state=101)
													
from sklearn.svm import SVC
svc_classifier=SVC(kernel='linear')
svc_classifier.fit(X_train,y_train)
predictions=svc_classifier.predict(X_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(predictions,y_test))
